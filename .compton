# Dylan's Compton Config
# Compton is launched with "compton --config ~/.compton"

#Shadows

# Enabled client-side shadows on windows.
shadow = true;

# Don't draw shadows on DND windows.
no-dnd-shadow = true;

# Avoid drawing shadows on dock/panel windows.
no-dock-shadow = false;

# Zero the part of the shadow's mask behind the window. Fix some weirdness with ARGB windows.
clear-shadow = true;

# The blur radius for shadows. (default 12)
shadow-radius = 4;

# The left offset for shadows. (default -15)
shadow-offset-x = -5;

# The top offset for shadows. (default -15)
shadow-offset-y = -5;

# The translucency for shadows. (default .75)
shadow-opacity = 0.75;

# Set if you want different colour shadows
shadow-red = 0.03;
shadow-green = 0.03;
shadow-blue = 0.04;

# The shadow excludR options are helpful if you have shadows enabled. Due to the way compton draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
   # "! name~=''",
   "name = 'dmenu2'",
   "name = 'Dmenu'",
   "name = 'bar'",
   "class_g ?= 'Dmenu'",
   "class_g ?= 'dmenu2'"
];

# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;

opacity-rule = [
	"95:class_g = 'URxvt'"
];

# Fading

# Fade windows during opacity changes.
fading = false;

# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 4;

# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.03;

# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.03;

# Fade windows in/out when opening/closing
# no-fading-openclose = true;

# Set VSync method. VSync methods currently available:
# none: No VSync
# drm: VSync with DRM_IOCTL_WAIT_VBLANK. May only work on some drivers.
# opengl: Try to VSync with SGI_video_sync OpenGL extension. Only work on some drivers.
# opengl-oml: Try to VSync with OML_sync_control OpenGL extension. Only work on some drivers.
# opengl-swc: Try to VSync with SGI_swap_control OpenGL extension. Only work on some drivers. Works only with GLX backend. Known to be most effective on many drivers. Does not actually control paint timing, only buffer swap is affected, so it doesnâ€™t have the effect of --sw-opti unlike other methods. Experimental.
# opengl-mswc: Try to VSync with MESA_swap_control OpenGL extension. Basically the same as opengl-swc above, except the extension we use.
# (Note some VSync methods may not be enabled at compile time.)
vsync = "none";



